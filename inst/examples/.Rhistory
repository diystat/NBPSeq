q()
n
prepare.nbp
q()
n
estimate.norm.factors
q()
n
library(NBPSeq)
print(obj)
plot(obj)
get.var.hat
arab
head(arab)
plot.nbp
plot.nbp
methods(plot)
plot.nbp
NBPSeq:::plot.nbp
str(obj)
rm(list=ls());
 prepare.nb.data
prepare.nbp
nbp.test
res
identical(res, obj)
res
obj
res
obj
obj$pseudo.counts
obj$pseudo.counts[1:10,]
res$pseudo.counts[1:10,]
colSum(res$pseudo.counts)
colSums(res$pseudo.counts)
colSums(obj$pseudo.counts)
dim(obj$pseudo.counts)
dim(res$pseudo.counts)
nbp.test
res
q()
n
library(NBPSeq)
identical(res, obj)
res
obj
all.equal(res, obj)
str(res)
str(obj)
res$p.values 
identical(res$p.values, obj$p.values)
q()
n
library(NBPSeq)
q()
n
x
nb.glm.test
nb.glm.test
estimate.dispersion
optim.disp.apl
ng.glm.test
nb.glm.tset
nb.glm.test
traceback
traceback()
Q
fit
q()
n
prepare.nb.data
estimate.dispersion
plot(nbq)
estimate.dispersion
test.coefficient)
test.coefficinet
test.coefficient
x
test.coefficients
test.coefficients
test.coefficient
test
res
subset
str(nb.data)
str(res)
test.coefficient
p.values
p.values
print(res)
res
res
calss(res)
class(res)
print(str(res))
print.nbtest
rm(print.nbtest)
res
print(res)
graphics.off()
disperison
dispersion
dim(res$HOA)
res$HOA
str(res$HOA)
dim(res$HOA)
res$HOA
res$HOA
nb.glm.test
fit
identical(fit, res)
fit
res
res
fit
identical(fit, res$test.results)
identical(fit$test.results, res)
str(fit)
q()
n


library(devtools)
load_all("../../")
plot.dispersion
plot.nb.dispersion
xlab
plot(x$model$predictor, x$estimates)
plot(x$model$predictor, x$estimates, log="xy")
q()
Q
q()
n
